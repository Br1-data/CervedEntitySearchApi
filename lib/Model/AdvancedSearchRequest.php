<?php
/**
 * AdvancedSearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Search
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdvancedSearchRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvancedSearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvancedSearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'search_text' => 'string',
        'activity_status_codes' => 'string[]',
        'birth_date' => 'string',
        'name' => 'string',
        'subject_types' => 'string[]',
        'tax_code' => 'string',
        'vat_number' => 'string',
        'rea' => '\Swagger\Client\Model\ReaInput',
        'city_istat_code' => 'string',
        'province_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'search_text' => null,
        'activity_status_codes' => null,
        'birth_date' => null,
        'name' => null,
        'subject_types' => null,
        'tax_code' => null,
        'vat_number' => null,
        'rea' => null,
        'city_istat_code' => null,
        'province_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'search_text' => 'search_text',
        'activity_status_codes' => 'activity_status_codes',
        'birth_date' => 'birth_date',
        'name' => 'name',
        'subject_types' => 'subject_types',
        'tax_code' => 'tax_code',
        'vat_number' => 'vat_number',
        'rea' => 'rea',
        'city_istat_code' => 'city_istat_code',
        'province_code' => 'province_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'search_text' => 'setSearchText',
        'activity_status_codes' => 'setActivityStatusCodes',
        'birth_date' => 'setBirthDate',
        'name' => 'setName',
        'subject_types' => 'setSubjectTypes',
        'tax_code' => 'setTaxCode',
        'vat_number' => 'setVatNumber',
        'rea' => 'setRea',
        'city_istat_code' => 'setCityIstatCode',
        'province_code' => 'setProvinceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'search_text' => 'getSearchText',
        'activity_status_codes' => 'getActivityStatusCodes',
        'birth_date' => 'getBirthDate',
        'name' => 'getName',
        'subject_types' => 'getSubjectTypes',
        'tax_code' => 'getTaxCode',
        'vat_number' => 'getVatNumber',
        'rea' => 'getRea',
        'city_istat_code' => 'getCityIstatCode',
        'province_code' => 'getProvinceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['search_text'] = isset($data['search_text']) ? $data['search_text'] : null;
        $this->container['activity_status_codes'] = isset($data['activity_status_codes']) ? $data['activity_status_codes'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subject_types'] = isset($data['subject_types']) ? $data['subject_types'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['rea'] = isset($data['rea']) ? $data['rea'] : null;
        $this->container['city_istat_code'] = isset($data['city_istat_code']) ? $data['city_istat_code'] : null;
        $this->container['province_code'] = isset($data['province_code']) ? $data['province_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets search_text
     *
     * @return string
     */
    public function getSearchText()
    {
        return $this->container['search_text'];
    }

    /**
     * Sets search_text
     *
     * @param string $search_text Parametro di ricerca generico i cui valori (di tipo stringa) non assumo un significato semantico definito.
     *
     * @return $this
     */
    public function setSearchText($search_text)
    {
        $this->container['search_text'] = $search_text;

        return $this;
    }

    /**
     * Gets activity_status_codes
     *
     * @return string[]
     */
    public function getActivityStatusCodes()
    {
        return $this->container['activity_status_codes'];
    }

    /**
     * Sets activity_status_codes
     *
     * @param string[] $activity_status_codes Lista di valori rappresentanti il possibile stato di attività del soggetto da ricercare. <br> I valori che possono comporre la lista sono: <br> A=attiva; C=cessata; D= in procedure; F=fallita; I=inattiva; L=in scioglimento/liquidazione; N=in procedura concorsuale; P=iscrizione; R=registrata; S=sospesa; T=cancellata
     *
     * @return $this
     */
    public function setActivityStatusCodes($activity_status_codes)
    {
        $this->container['activity_status_codes'] = $activity_status_codes;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string $birth_date Data di nascita del soggetto da ricercare, conforme al seguente formato: yyyy-mm-dd
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Nome del soggetto da ricercare
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject_types
     *
     * @return string[]
     */
    public function getSubjectTypes()
    {
        return $this->container['subject_types'];
    }

    /**
     * Sets subject_types
     *
     * @param string[] $subject_types Tipo del soggetto da ricercare. Questo parametro è una lista composta da almeno uno dei seguenti valori: <br> PERSON=persona fisica; COMPANY=societa (di capitali o di persone); INDIVIDUAL_COMPANY=ditta individuale; FOREIGN=società o organizzazione non italiana, OTHER=qualsiasi altro tipo di soggetto non elencato nei tipi precedenti
     *
     * @return $this
     */
    public function setSubjectTypes($subject_types)
    {
        $this->container['subject_types'] = $subject_types;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code Codice fiscale del soggetto da ricercare
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number Partita Iva del soggetto da ricercare
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets rea
     *
     * @return \Swagger\Client\Model\ReaInput
     */
    public function getRea()
    {
        return $this->container['rea'];
    }

    /**
     * Sets rea
     *
     * @param \Swagger\Client\Model\ReaInput $rea rea
     *
     * @return $this
     */
    public function setRea($rea)
    {
        $this->container['rea'] = $rea;

        return $this;
    }

    /**
     * Gets city_istat_code
     *
     * @return string
     */
    public function getCityIstatCode()
    {
        return $this->container['city_istat_code'];
    }

    /**
     * Sets city_istat_code
     *
     * @param string $city_istat_code Codice ISTAT del comune del soggetto da ricercare (https://www.istat.it/it/archivio/6789).
     *
     * @return $this
     */
    public function setCityIstatCode($city_istat_code)
    {
        $this->container['city_istat_code'] = $city_istat_code;

        return $this;
    }

    /**
     * Gets province_code
     *
     * @return string
     */
    public function getProvinceCode()
    {
        return $this->container['province_code'];
    }

    /**
     * Sets province_code
     *
     * @param string $province_code Sigla della provincia dell'indirizzo del soggetto da ricercare
     *
     * @return $this
     */
    public function setProvinceCode($province_code)
    {
        $this->container['province_code'] = $province_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


