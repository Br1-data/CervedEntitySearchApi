<?php
/**
 * DatiAnagraficiPeople
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Search
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DatiAnagraficiPeople Class Doc Comment
 *
 * @category Class
 * @description Dati anagrafici del Soggetto
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DatiAnagraficiPeople implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DatiAnagraficiPeople';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dt_nascita' => 'string',
        'id_soggetto' => 'string',
        'denominazione' => 'string',
        'codice_fiscale' => 'string',
        'indirizzo' => '\Swagger\Client\Model\Address'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dt_nascita' => null,
        'id_soggetto' => null,
        'denominazione' => null,
        'codice_fiscale' => null,
        'indirizzo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dt_nascita' => 'dt_nascita',
        'id_soggetto' => 'id_soggetto',
        'denominazione' => 'denominazione',
        'codice_fiscale' => 'codice_fiscale',
        'indirizzo' => 'indirizzo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dt_nascita' => 'setDtNascita',
        'id_soggetto' => 'setIdSoggetto',
        'denominazione' => 'setDenominazione',
        'codice_fiscale' => 'setCodiceFiscale',
        'indirizzo' => 'setIndirizzo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dt_nascita' => 'getDtNascita',
        'id_soggetto' => 'getIdSoggetto',
        'denominazione' => 'getDenominazione',
        'codice_fiscale' => 'getCodiceFiscale',
        'indirizzo' => 'getIndirizzo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dt_nascita'] = isset($data['dt_nascita']) ? $data['dt_nascita'] : null;
        $this->container['id_soggetto'] = isset($data['id_soggetto']) ? $data['id_soggetto'] : null;
        $this->container['denominazione'] = isset($data['denominazione']) ? $data['denominazione'] : null;
        $this->container['codice_fiscale'] = isset($data['codice_fiscale']) ? $data['codice_fiscale'] : null;
        $this->container['indirizzo'] = isset($data['indirizzo']) ? $data['indirizzo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dt_nascita'] === null) {
            $invalidProperties[] = "'dt_nascita' can't be null";
        }
        if ($this->container['id_soggetto'] === null) {
            $invalidProperties[] = "'id_soggetto' can't be null";
        }
        if ($this->container['denominazione'] === null) {
            $invalidProperties[] = "'denominazione' can't be null";
        }
        if ($this->container['codice_fiscale'] === null) {
            $invalidProperties[] = "'codice_fiscale' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dt_nascita
     *
     * @return string
     */
    public function getDtNascita()
    {
        return $this->container['dt_nascita'];
    }

    /**
     * Sets dt_nascita
     *
     * @param string $dt_nascita Data di nascita del soggetto
     *
     * @return $this
     */
    public function setDtNascita($dt_nascita)
    {
        $this->container['dt_nascita'] = $dt_nascita;

        return $this;
    }

    /**
     * Gets id_soggetto
     *
     * @return string
     */
    public function getIdSoggetto()
    {
        return $this->container['id_soggetto'];
    }

    /**
     * Sets id_soggetto
     *
     * @param string $id_soggetto Identificativo univoco Cerved del Soggetto (persona fisica o giuridica)
     *
     * @return $this
     */
    public function setIdSoggetto($id_soggetto)
    {
        $this->container['id_soggetto'] = $id_soggetto;

        return $this;
    }

    /**
     * Gets denominazione
     *
     * @return string
     */
    public function getDenominazione()
    {
        return $this->container['denominazione'];
    }

    /**
     * Sets denominazione
     *
     * @param string $denominazione Ragione sociale del Soggetto
     *
     * @return $this
     */
    public function setDenominazione($denominazione)
    {
        $this->container['denominazione'] = $denominazione;

        return $this;
    }

    /**
     * Gets codice_fiscale
     *
     * @return string
     */
    public function getCodiceFiscale()
    {
        return $this->container['codice_fiscale'];
    }

    /**
     * Sets codice_fiscale
     *
     * @param string $codice_fiscale Codice fiscale del Soggetto
     *
     * @return $this
     */
    public function setCodiceFiscale($codice_fiscale)
    {
        $this->container['codice_fiscale'] = $codice_fiscale;

        return $this;
    }

    /**
     * Gets indirizzo
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getIndirizzo()
    {
        return $this->container['indirizzo'];
    }

    /**
     * Sets indirizzo
     *
     * @param \Swagger\Client\Model\Address $indirizzo indirizzo
     *
     * @return $this
     */
    public function setIndirizzo($indirizzo)
    {
        $this->container['indirizzo'] = $indirizzo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


