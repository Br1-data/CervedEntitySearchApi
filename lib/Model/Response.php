<?php
/**
 * Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Search
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Response Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'companies_total_number' => 'int',
        'people_total_number' => 'int',
        'companies' => '\Swagger\Client\Model\Companies[]',
        'people' => '\Swagger\Client\Model\People[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'companies_total_number' => null,
        'people_total_number' => null,
        'companies' => null,
        'people' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'companies_total_number' => 'companiesTotalNumber',
        'people_total_number' => 'peopleTotalNumber',
        'companies' => 'companies',
        'people' => 'people'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'companies_total_number' => 'setCompaniesTotalNumber',
        'people_total_number' => 'setPeopleTotalNumber',
        'companies' => 'setCompanies',
        'people' => 'setPeople'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'companies_total_number' => 'getCompaniesTotalNumber',
        'people_total_number' => 'getPeopleTotalNumber',
        'companies' => 'getCompanies',
        'people' => 'getPeople'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['companies_total_number'] = isset($data['companies_total_number']) ? $data['companies_total_number'] : null;
        $this->container['people_total_number'] = isset($data['people_total_number']) ? $data['people_total_number'] : null;
        $this->container['companies'] = isset($data['companies']) ? $data['companies'] : null;
        $this->container['people'] = isset($data['people']) ? $data['people'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['companies_total_number'] === null) {
            $invalidProperties[] = "'companies_total_number' can't be null";
        }
        if ($this->container['people_total_number'] === null) {
            $invalidProperties[] = "'people_total_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets companies_total_number
     *
     * @return int
     */
    public function getCompaniesTotalNumber()
    {
        return $this->container['companies_total_number'];
    }

    /**
     * Sets companies_total_number
     *
     * @param int $companies_total_number Numero totale di persone giuridiche trovate
     *
     * @return $this
     */
    public function setCompaniesTotalNumber($companies_total_number)
    {
        $this->container['companies_total_number'] = $companies_total_number;

        return $this;
    }

    /**
     * Gets people_total_number
     *
     * @return int
     */
    public function getPeopleTotalNumber()
    {
        return $this->container['people_total_number'];
    }

    /**
     * Sets people_total_number
     *
     * @param int $people_total_number Numero totale di persone fisiche trovate
     *
     * @return $this
     */
    public function setPeopleTotalNumber($people_total_number)
    {
        $this->container['people_total_number'] = $people_total_number;

        return $this;
    }

    /**
     * Gets companies
     *
     * @return \Swagger\Client\Model\Companies[]
     */
    public function getCompanies()
    {
        return $this->container['companies'];
    }

    /**
     * Sets companies
     *
     * @param \Swagger\Client\Model\Companies[] $companies Companies
     *
     * @return $this
     */
    public function setCompanies($companies)
    {
        $this->container['companies'] = $companies;

        return $this;
    }

    /**
     * Gets people
     *
     * @return \Swagger\Client\Model\People[]
     */
    public function getPeople()
    {
        return $this->container['people'];
    }

    /**
     * Sets people
     *
     * @param \Swagger\Client\Model\People[] $people People
     *
     * @return $this
     */
    public function setPeople($people)
    {
        $this->container['people'] = $people;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


